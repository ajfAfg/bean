{erl_opts, [debug_info]}.

{alias, [{check, [xref, dialyzer]}]}.

{deps,
 [{rebar,
   {git_subdir, "https://github.com/erlang/rebar3.git", {tag, "3.22.0"}, "apps/rebar"}},
  providers]}.

% NOTE:
% Make the rebar application analyzable by Dialyzer.
% See `make_rebar_application_analyzable_by_dialyzer.sh` in details.
{pre_hooks, [{compile, "sh make_rebar_application_analyzable_by_dialyzer.sh"}]}.

%% the plugin itself
{project_plugins, [rebar3_proper]}.

%% The PropEr dependency is required to compile the test cases
%% and will be used to run the tests as well.
{profiles,
 [{test,
   [{deps,
     %% hex
     [{proper, "1.4.0"}]}]}]}.

{dialyzer,
 [{warnings,
   [error_handling,
    no_behaviours,
    no_contracts,
    no_improper_lists,
    no_match,
    no_missing_calls,
    no_opaque,
    no_return,
    no_undefined_callbacks]},
  {get_warnings, true},
  {plt_apps, top_level_deps}, % top_level_deps | all_deps
  {plt_extra_apps, [rebar, providers]},
  {plt_location, local}, % local | "/my/file/name"
  {plt_prefix, "rebar3"},
  {base_plt_apps, [stdlib, kernel, crypto, erts, compiler, dialyzer]},
  {base_plt_location, global}, % global | "/my/file/name"
  {base_plt_prefix, "rebar3"},
  incremental]}.

{xref_checks,
 [undefined_function_calls,
  undefined_functions,
  locals_not_used,
  exports_not_used,
  deprecated_function_calls,
  deprecated_functions]}.

% TODO: I do not want to warn about functions that are referenced in the test code.
{xref_ignores,
 [{optimum_supervision_tree_solver, take_all_local_minimum_vertex_splitters, 1},
  {supervision_tree, are_isomorphic, 2},
  {my_lists, sublist_randomly, 1},
  {my_digraph_utils, clone, 1}]}.
